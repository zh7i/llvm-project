//===-- DRAIMCCodeEmitter.cpp - Convert DRAI code to machine code ---------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file implements the DRAIMCCodeEmitter class.
//
//===----------------------------------------------------------------------===//

//#include "MCTargetDesc/DRAIMCFixups.h"
#include "MCTargetDesc/DRAIMCTargetDesc.h"
#include "MCTargetDesc/DRAIFixupKinds.h"
#include "llvm/ADT/SmallVector.h"
#include "llvm/MC/MCCodeEmitter.h"
#include "llvm/MC/MCContext.h"
#include "llvm/MC/MCExpr.h"
#include "llvm/MC/MCFixup.h"
#include "llvm/MC/MCInst.h"
#include "llvm/MC/MCInstrInfo.h"
#include "llvm/MC/MCRegisterInfo.h"
#include "llvm/MC/MCSubtargetInfo.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"
#include <cassert>
#include <cstdint>
#include <iostream>

using namespace llvm;

namespace {

class DRAIMCCodeEmitter : public MCCodeEmitter {
  DRAIMCCodeEmitter(const DRAIMCCodeEmitter &) = delete;
  void operator=(const DRAIMCCodeEmitter &) = delete;
  const MCInstrInfo &MCII;
  MCContext &Ctx;

  /// \brief Return the binary encoding of operand. If the machine
  /// operand requires relocation, record the relocation and return zero.
  uint64_t getMachineOpValue(const MCInst &MI, const MCOperand &MO,
                             SmallVectorImpl<MCFixup> &Fixups,
                             const MCSubtargetInfo &STI) const;

  unsigned getPC26Encoding(const MCInst &MI, unsigned OpNo,
                           SmallVectorImpl<MCFixup> &Fixups,
                           const MCSubtargetInfo &STI) const;

public:
  DRAIMCCodeEmitter(const MCInstrInfo &mcii, MCContext &ctx)
      : MCII(mcii), Ctx(ctx) {}

  ~DRAIMCCodeEmitter() override {}

  // OVerride MCCodeEmitter.
  void encodeInstruction(const MCInst &MI, raw_ostream &OS,
                         SmallVectorImpl<MCFixup> &Fixups,
                         const MCSubtargetInfo &STI) const override;

  // Generated by TableGen.
  uint64_t getBinaryCodeForInstr(const MCInst &MI,
                                 SmallVectorImpl<MCFixup> &Fixups,
                                 const MCSubtargetInfo &STI) const;

  // Functions called by the generated function.

};

} // end anonymous namespace

void DRAIMCCodeEmitter::encodeInstruction(const MCInst &MI, raw_ostream &OS,
                                          SmallVectorImpl<MCFixup> &Fixups,
                                          const MCSubtargetInfo &STI) const {
  uint64_t Bits = getBinaryCodeForInstr(MI, Fixups, STI);
  //assert(MCII.get(MI.getOpcode()).getSize() == 4 && "Unexpected instr length");
  // Emit bytes in little-endian
  for (int I = 0; I < 8 * 8; I += 8){
    OS << static_cast<uint8_t>((Bits >> I) & 0xff);
  }
}

uint64_t
DRAIMCCodeEmitter::getMachineOpValue(const MCInst &MI, const MCOperand &MO,
                                     SmallVectorImpl<MCFixup> &Fixups,
                                     const MCSubtargetInfo &STI) const {
  const auto *RI = Ctx.getRegisterInfo();
  if (MO.isReg()) {
    uint16_t EV = RI->getEncodingValue(MO.getReg());
    return EV;
  } else if (MO.isImm()) {
    return static_cast<uint64_t>(MO.getImm());
  } else if (MO.isSFPImm()) {
    return MO.getSFPImm();
  } else if (MO.isExpr()) {
    switch (MI.getOpcode()) {
    default:
      break;
    case DRAI::JmpFirst:
    case DRAI::JmpAll:
    case DRAI::JmpAny:
    case DRAI::JmpNone:
    case DRAI::Loop:
      Fixups.push_back(MCFixup::create(
          0, MO.getExpr(), MCFixupKind(DRAI::FixupRelPC32), MI.getLoc()));
      return 0;
    }
  }
  llvm_unreachable("Unexpected operand type!");
}

// unsigned DRAIMCCodeEmitter::getPC26Encoding(const MCInst &MI, unsigned OpNo,
//                                             SmallVectorImpl<MCFixup> &Fixups,
//                                             const MCSubtargetInfo &STI) const {
//   // TODO Implement.
//   return 0;
// }

//#define ENABLE_INSTR_PREDICATE_VERIFIER
#include "DRAIGenMCCodeEmitter.inc"

MCCodeEmitter *llvm::createDRAIMCCodeEmitter(const MCInstrInfo &MCII,
                                             MCContext &Ctx) {
  return new DRAIMCCodeEmitter(MCII, Ctx);
}

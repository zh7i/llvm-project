#ifndef LLVM_LIB_TARGET_DRAI_DRAISUBTARGET_H
#define LLVM_LIB_TARGET_DRAI_DRAISUBTARGET_H

#include "DRAIFrameLowering.h"
#include "DRAIISelLowering.h"
#include "DRAIInstrInfo.h"
#include "DRAIRegisterInfo.h"
//#include "DRAISelectionDAGInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetFrameLowering.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Support/CommandLine.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "DRAIGenSubtargetInfo.inc"

namespace llvm {
class StringRef;

extern cl::opt<bool> drai_hardware_loops;

class DRAISubtarget : public DRAIGenSubtargetInfo {
  Triple TargetTriple;
  virtual void anchor();

  DRAIInstrInfo InstrInfo;
  DRAITargetLowering TLInfo;
  // SelectionDAGTargetInfo TSInfo;
  DRAIFrameLowering FrameLowering;

public:
  DRAISubtarget(const Triple &TT, const std::string &CPU, const std::string &FS,
                const TargetMachine &TM);

  // Automatically generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);

  const TargetFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const DRAIInstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const DRAIRegisterInfo *getRegisterInfo() const override {
    return &InstrInfo.getRegisterInfo();
  }
  const DRAITargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
#if 0
  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }
#endif

  uint32_t GetDRAISimdWidth() const;
  EVT Vec(EVT e) const;
  MVT Vec(MVT e) const;
  MVT::SimpleValueType Vec(MVT::SimpleValueType e) const;
};

} // end namespace llvm

#endif
